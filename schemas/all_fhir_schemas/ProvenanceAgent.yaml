$id: ProvenanceAgent
additionalProperties: false
description: Actor involved. An actor taking a role in an activity  for which it can
  be assigned some degree of responsibility for the activity taking place. [See https://hl7.org/fhir/R5/ProvenanceAgent.html]
  [See https://hl7.org/fhir/R5/ProvenanceAgent.html]
links:
- href: Practitioner/{id}
  rel: onBehalfOf_Practitioner
  targetHints:
    backref:
    - onBehalfOf_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: Practitioner.yaml
  templatePointers:
    id: /onBehalfOf/reference
  templateRequired:
  - id
- href: PractitionerRole/{id}
  rel: onBehalfOf_PractitionerRole
  targetHints:
    backref:
    - onBehalfOf_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: PractitionerRole.yaml
  templatePointers:
    id: /onBehalfOf/reference
  templateRequired:
  - id
- href: Organization/{id}
  rel: onBehalfOf_Organization
  targetHints:
    backref:
    - onBehalfOf_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: Organization.yaml
  templatePointers:
    id: /onBehalfOf/reference
  templateRequired:
  - id
- href: CareTeam/{id}
  rel: onBehalfOf_CareTeam
  targetHints:
    backref:
    - onBehalfOf_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: CareTeam.yaml
  templatePointers:
    id: /onBehalfOf/reference
  templateRequired:
  - id
- href: Patient/{id}
  rel: onBehalfOf_Patient
  targetHints:
    backref:
    - onBehalfOf_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: Patient.yaml
  templatePointers:
    id: /onBehalfOf/reference
  templateRequired:
  - id
- href: Practitioner/{id}
  rel: who_Practitioner
  targetHints:
    backref:
    - who_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: Practitioner.yaml
  templatePointers:
    id: /who/reference
  templateRequired:
  - id
- href: PractitionerRole/{id}
  rel: who_PractitionerRole
  targetHints:
    backref:
    - who_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: PractitionerRole.yaml
  templatePointers:
    id: /who/reference
  templateRequired:
  - id
- href: Organization/{id}
  rel: who_Organization
  targetHints:
    backref:
    - who_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: Organization.yaml
  templatePointers:
    id: /who/reference
  templateRequired:
  - id
- href: CareTeam/{id}
  rel: who_CareTeam
  targetHints:
    backref:
    - who_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: CareTeam.yaml
  templatePointers:
    id: /who/reference
  templateRequired:
  - id
- href: Patient/{id}
  rel: who_Patient
  targetHints:
    backref:
    - who_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: Patient.yaml
  templatePointers:
    id: /who/reference
  templateRequired:
  - id
- href: Device/{id}
  rel: who_Device
  targetHints:
    backref:
    - who_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: Device.yaml
  templatePointers:
    id: /who/reference
  templateRequired:
  - id
- href: RelatedPerson/{id}
  rel: who_RelatedPerson
  targetHints:
    backref:
    - who_provenance_agent
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: RelatedPerson.yaml
  templatePointers:
    id: /who/reference
  templateRequired:
  - id
properties:
  extension:
    description: May be used to represent additional information that is not part
      of the basic definition of the element. To make the use of extensions safe and
      managable, there is a strict set of governance applied to the definition and
      use of extensions. Though any implementer can define an extension, there is
      a set of requirements that SHALL be met as part of the definition of the extension.
    element_property: true
    items:
      $ref: Extension.yaml
    title: Additional content defined by implementations
    type: array
  fhir_comments:
    anyOf:
    - type: string
    - items:
        type: string
      type: array
    element_property: false
    title: Fhir Comments
  id:
    description: Unique id for the element within a resource (for internal references).
      This may be any string value that does not contain spaces.
    element_property: true
    pattern: '[ \r\n\t\S]+'
    title: Unique id for inter-element referencing
    type: string
  links:
    links:
      items:
        $ref: https://json-schema.org/draft/2020-12/links.yaml
      type: array
  modifierExtension:
    description: May be used to represent additional information that is not part
      of the basic definition of the element and that modifies the understanding of
      the element in which it is contained and/or the understanding of the containing
      element's descendants. Usually modifier elements provide negation or qualification.
      To make the use of extensions safe and managable, there is a strict set of governance
      applied to the definition and use of extensions. Though any implementer can
      define an extension, there is a set of requirements that SHALL be met as part
      of the definition of the extension. Applications processing a resource are required
      to check for modifier extensions.  Modifier extensions SHALL NOT change the
      meaning of any elements on Resource or DomainResource (including cannot change
      the meaning of modifierExtension itself).
    element_property: true
    items:
      $ref: Extension.yaml
    title: Extensions that cannot be ignored even if unrecognized
    type: array
  onBehalfOf:
    $ref: Reference.yaml
    backref: onBehalfOf_provenance_agent
    description: The agent that delegated authority to perform the activity performed
      by the agent.who element.
    element_property: true
    enum_reference_types:
    - Practitioner
    - PractitionerRole
    - Organization
    - CareTeam
    - Patient
    title: The agent that delegated
  resourceType:
    const: ProvenanceAgent
    default: ProvenanceAgent
    description: One of the resource types defined as part of FHIR
    title: Resource Type
    type: string
  role:
    binding_description: The role that a provenance agent played with respect to the
      activity.
    binding_strength: example
    binding_uri: http://hl7.org/fhir/ValueSet/security-role-type
    binding_version: null
    description: The structural roles of the agent indicating the agent's competency.
      The security role enabling the agent with respect to the activity.
    element_property: true
    items:
      $ref: CodeableConcept.yaml
    title: What the agents role was
    type: array
  type:
    $ref: CodeableConcept.yaml
    binding_description: Types of roles that agents can play when tracking event history
      using Provenance.
    binding_strength: extensible
    binding_uri: http://hl7.org/fhir/ValueSet/provenance-history-agent-type
    binding_version: null
    description: The Functional Role of the agent with respect to the activity.
    element_property: true
    title: How the agent participated
  who:
    $ref: Reference.yaml
    backref: who_provenance_agent
    description: Indicates who or what performed in the event.
    element_property: true
    enum_reference_types:
    - Practitioner
    - PractitionerRole
    - Organization
    - CareTeam
    - Patient
    - Device
    - RelatedPerson
    title: The agent that participated in the event
required:
- who
title: ProvenanceAgent
type: object
