$id: PackagedProductDefinitionPackagingContainedItem
additionalProperties: false
description: The item(s) within the packaging. [See https://hl7.org/fhir/R5/PackagedProductDefinitionPackagingContainedItem.html]
  [See https://hl7.org/fhir/R5/PackagedProductDefinitionPackagingContainedItem.html]
links:
- href: Reference/{id}
  rel: item_reference
  targetHints:
    backref:
    - codeable_reference
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: Reference.yaml
  templatePointers:
    id: /item/reference/reference
  templateRequired:
  - id
properties:
  amount:
    $ref: Quantity.yaml
    element_property: true
    title: The number of this type of item within this packaging or for continuous
      items such as liquids it is the quantity (for example 25ml). See also PackagedProductDefinition.containedItemQuantity
      (especially the long definition)
  extension:
    description: May be used to represent additional information that is not part
      of the basic definition of the element. To make the use of extensions safe and
      managable, there is a strict set of governance applied to the definition and
      use of extensions. Though any implementer can define an extension, there is
      a set of requirements that SHALL be met as part of the definition of the extension.
    element_property: true
    items:
      $ref: Extension.yaml
    title: Additional content defined by implementations
    type: array
  fhir_comments:
    anyOf:
    - type: string
    - items:
        type: string
      type: array
    element_property: false
    title: Fhir Comments
  id:
    description: Unique id for the element within a resource (for internal references).
      This may be any string value that does not contain spaces.
    element_property: true
    pattern: '[ \r\n\t\S]+'
    title: Unique id for inter-element referencing
    type: string
  item:
    $ref: CodeableReference.yaml
    backref: packaged_product_definition_packaging_contained_item
    description: The actual item(s) of medication, as manufactured, or a device (typically,
      but not necessarily, a co-packaged one), or other medically related item (such
      as food, biologicals, raw materials, medical fluids, gases etc.), as contained
      in the package. This also allows another whole packaged product to be included,
      which is solely for the case where a package of other entire packages is wanted
      - such as a wholesale or distribution pack (for layers within one package, use
      PackagedProductDefinition.packaging.packaging).
    element_property: true
    enum_reference_types:
    - ManufacturedItemDefinition
    - DeviceDefinition
    - PackagedProductDefinition
    - BiologicallyDerivedProduct
    - NutritionProduct
    title: The actual item(s) of medication, as manufactured, or a device, or other
      medically related item (food, biologicals, raw materials, medical fluids, gases
      etc.), as contained in the package
  links:
    links:
      items:
        $ref: https://json-schema.org/draft/2020-12/links.yaml
      type: array
  modifierExtension:
    description: May be used to represent additional information that is not part
      of the basic definition of the element and that modifies the understanding of
      the element in which it is contained and/or the understanding of the containing
      element's descendants. Usually modifier elements provide negation or qualification.
      To make the use of extensions safe and managable, there is a strict set of governance
      applied to the definition and use of extensions. Though any implementer can
      define an extension, there is a set of requirements that SHALL be met as part
      of the definition of the extension. Applications processing a resource are required
      to check for modifier extensions.  Modifier extensions SHALL NOT change the
      meaning of any elements on Resource or DomainResource (including cannot change
      the meaning of modifierExtension itself).
    element_property: true
    items:
      $ref: Extension.yaml
    title: Extensions that cannot be ignored even if unrecognized
    type: array
  resourceType:
    const: PackagedProductDefinitionPackagingContainedItem
    default: PackagedProductDefinitionPackagingContainedItem
    description: One of the resource types defined as part of FHIR
    title: Resource Type
    type: string
required:
- item
title: PackagedProductDefinitionPackagingContainedItem
type: object
