$id: TestScriptFixture
additionalProperties: false
description: Fixture in the test script - by reference (uri). Fixture in the test
  script - by reference (uri). All fixtures are required for the test script to execute.
  [See https://hl7.org/fhir/R5/TestScriptFixture.html]
links:
- href: Resource/{id}
  rel: resource
  targetHints:
    backref:
    - test_script_fixture
    direction:
    - outbound
    multiplicity:
    - has_one
  targetSchema:
    $ref: Resource.yaml
  templatePointers:
    id: /resource/reference
  templateRequired:
  - id
properties:
  _autocreate:
    $ref: FHIRPrimitiveExtension.yaml
    title: Extension field for ``autocreate``.
  _autodelete:
    $ref: FHIRPrimitiveExtension.yaml
    title: Extension field for ``autodelete``.
  autocreate:
    description: Whether or not to implicitly create the fixture during setup. If
      true, the fixture is automatically created on each server being tested during
      setup, therefore no create operation is required for this fixture in the TestScript.setup
      section.
    element_property: true
    element_required: true
    title: Whether or not to implicitly create the fixture during setup
    type: boolean
  autodelete:
    description: Whether or not to implicitly delete the fixture during teardown.
      If true, the fixture is automatically deleted on each server being tested during
      teardown, therefore no delete operation is required for this fixture in the
      TestScript.teardown section.
    element_property: true
    element_required: true
    title: Whether or not to implicitly delete the fixture during teardown
    type: boolean
  extension:
    description: May be used to represent additional information that is not part
      of the basic definition of the element. To make the use of extensions safe and
      managable, there is a strict set of governance applied to the definition and
      use of extensions. Though any implementer can define an extension, there is
      a set of requirements that SHALL be met as part of the definition of the extension.
    element_property: true
    items:
      $ref: Extension.yaml
    title: Additional content defined by implementations
    type: array
  fhir_comments:
    anyOf:
    - type: string
    - items:
        type: string
      type: array
    element_property: false
    title: Fhir Comments
  id:
    description: Unique id for the element within a resource (for internal references).
      This may be any string value that does not contain spaces.
    element_property: true
    pattern: '[ \r\n\t\S]+'
    title: Unique id for inter-element referencing
    type: string
  links:
    links:
      items:
        $ref: https://json-schema.org/draft/2020-12/links.yaml
      type: array
  modifierExtension:
    description: May be used to represent additional information that is not part
      of the basic definition of the element and that modifies the understanding of
      the element in which it is contained and/or the understanding of the containing
      element's descendants. Usually modifier elements provide negation or qualification.
      To make the use of extensions safe and managable, there is a strict set of governance
      applied to the definition and use of extensions. Though any implementer can
      define an extension, there is a set of requirements that SHALL be met as part
      of the definition of the extension. Applications processing a resource are required
      to check for modifier extensions.  Modifier extensions SHALL NOT change the
      meaning of any elements on Resource or DomainResource (including cannot change
      the meaning of modifierExtension itself).
    element_property: true
    items:
      $ref: Extension.yaml
    title: Extensions that cannot be ignored even if unrecognized
    type: array
  resource:
    $ref: Reference.yaml
    backref: test_script_fixture
    description: Reference to the resource (containing the contents of the resource
      needed for operations). This is allowed to be a Parameters resource.
    element_property: true
    enum_reference_types:
    - Resource
    title: Reference of the resource
  resourceType:
    const: TestScriptFixture
    default: TestScriptFixture
    description: One of the resource types defined as part of FHIR
    title: Resource Type
    type: string
title: TestScriptFixture
type: object
